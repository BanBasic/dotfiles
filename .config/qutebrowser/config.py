# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://google.com/wsearch?hl=en&q={}', 'aw': 'https://wiki.archlinux.org/index.php?title=Special%3ASearch&search={}', 'yt': 'https://www.youtube.com/results?search_query={}', 'd': 'https://duckduckgo.com/?q={}', 'r': 'https://old.reddit.com/r/{}'}


c.url.searchengines = {                                                                                                                                                                                       
   "DEFAULT":'https://google.com/search?hl=en&q={}',                                                                                                                                                        
   "d": 'https://duckduckgo.com/?q={}', 
   "or": 'https://old.reddit.com/r/{}',         
   "r": 'https://www.reddit.com/r/{}',                                                                                                                                                                       
   "w": 'https://en.wikipedia.org/wiki/={}',                                                                                                                                                                 
   "x": 'https://xhamster.com/search?q={}',                                                                                                                                                                  
   "y": 'https://www.youtube.com/results?search_query={}',                                                                                                                                                   
} 



# Page(s) to open at the start.
c.url.start_pages = 'http://koryschneider.github.io/tab/'

# sets new tab page
c.url.default_page = 'http://koryschneider.github.io/tab/'

# Show a filebrowser in upload/download prompts.
# Type: Bool
c.prompt.filebrowser = True


# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = True

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True



# Scaling for favicons in the tab bar. The tab size is unchanged, so big
# favicons also require extra `tabs.padding`.
# Type: Float
c.tabs.favicons.scale = 1.2

# Show favicons in the tab bar.
# Type: Bool
c.tabs.favicons.show = 'always'



# Switch between tabs using the mouse wheel.
# Type: Bool
c.tabs.mousewheel_switching = True

# How new tabs opened from another tab are positioned.
# Type: NewTabPosition
# Valid values:
#   - prev: Before the current tab.
#   - next: After the current tab.
#   - first: At the beginning.
#   - last: At the end.
c.tabs.new_position.related = 'next'

# How new tabs which aren't opened from another tab are positioned.
# Type: NewTabPosition
# Valid values:
#   - prev: Before the current tab.
#   - next: After the current tab.
#   - first: At the beginning.
#   - last: At the end.
c.tabs.new_position.unrelated = 'next'

# The position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'bottom'

# The URL parameters to strip with `:yank url`.
# Type: List of String
c.url.yank_ignored_parameters = ['ref', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']


# The default zoom level.
# Type: Perc
c.zoom.default = '100%'

# The available zoom levels.
# Type: List of Perc
c.zoom.levels = ['25%', '33%', '50%', '67%', '75%', '90%', '100%', '110%', '125%', '150%', '175%', '200%', '250%', '300%', '400%', '500%']

# How much to divide the mouse wheel movements to translate them into
# zoom increments.
# Type: Int
c.zoom.mouse_divider = 512

# Whether the zoom factor on a frame applies only to the text or to all
# content.
# Type: Bool
c.zoom.text_only = False




####################################################
# Bindings for normal mode
config.bind('+', 'zoom-in')
config.bind('-', 'zoom-out')

config.bind('gt', 'tab-next')
config.bind('gr', 'tab-prev')

config.bind('[[', 'navigate prev')
config.bind(']]', 'navigate next')



###################################################
